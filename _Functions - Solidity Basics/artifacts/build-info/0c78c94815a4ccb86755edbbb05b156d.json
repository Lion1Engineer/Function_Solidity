{
	"id": "0c78c94815a4ccb86755edbbb05b156d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"Functions.sol": {
				"content": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\ncontract Funcions{\r\n    /*\r\n    // We usually use functions to change the data we hold in stake\r\n\r\n    uint luckyNumber = 7;\r\n    function showNumber() public view returns(uint)\r\n    {\r\n        return luckyNumber;\r\n    }\r\n\r\n    // Instead of writing the above function, we can briefly show it as follows:\r\n    \r\n    uint public luckyNumber2 = 8;\r\n    */\r\n\r\n    /*\r\n    // The method we need to use to take the number from outside and change it in the function:\r\n\r\n    uint public luckyNumber = 7;\r\n\r\n    function setNumber (uint newNumber) public {\r\n        luckyNumber = newNumber;\r\n    }\r\n    */\r\n\r\n    /*\r\n    //If we want to return more than one data, we should use the following function.\r\n\r\n    function nothing() public pure returns(uint , bool, bool)\r\n    {\r\n        return(5,true ,false);\r\n    }\r\n\r\n    // Another representation of the above function\r\n        function nothing2() public pure returns(uint x , bool y, bool z)\r\n    {\r\n        x = 7;\r\n        y = true;\r\n        z = false;\r\n    }\r\n    */\r\n\r\n    /*\r\n    // Why are views used in functions?\r\n    // We use view for reading in the function.\r\n    // When we read an expression from the global, we need to mark our function with view.\r\n\r\n    function add(uint a, uint b) public view returns(uint)\r\n    {\r\n        return a + b + block.timestamp;\r\n        // block.timestamp is a global variable that retrieves the current time from the computer\r\n    }   \r\n    */\r\n\r\n    /*\r\n    // why are pures used in functions?\r\n    // pure is used when no changes or readings are made.\r\n    function add2 (uint a, uint b) public pure returns(uint)\r\n    {\r\n        return a + b;\r\n    }\r\n    */\r\n\r\n    /*\r\n    // Public: This function can be called by both external users and contracts.\r\n    function add3(uint a, uint b) public pure returns(uint)\r\n    {\r\n        return a + b;\r\n    } \r\n    function callAdd3(uint c,uint d) public pure returns(uint)\r\n    {\r\n        return add3(c,d);\r\n    }\r\n    */\r\n\r\n    /*\r\n    // Private: Only the contract can access this function.\r\n    \r\n    function privateKeyword() private pure returns(string memory)\r\n    {\r\n        return \"This is a private function\";\r\n    }\r\n    function callPrivateKeyword() public pure returns(string memory)\r\n    {\r\n        return privateKeyword();\r\n    }\r\n    */\r\n\r\n    /*\r\n    // Internal:Only the person to whom we inherit the contract can access this function.\r\n    function internalKeyword() internal  pure returns(string memory)\r\n    {\r\n        return \"This is a internal function\";\r\n    }\r\n    function callInternalKeyword() public pure returns(string memory)\r\n    {\r\n        return internalKeyword();\r\n    }\r\n    */\r\n\r\n    /*\r\n    // External: This function can only call external users\r\n    function externalKeyword() external  pure returns(string memory)\r\n    {\r\n        return \"This is a external function\";\r\n    }\r\n    */\r\n\r\n\r\n\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"Functions.sol": {
				"Funcions": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Functions.sol\":67:2926  contract Funcions{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Functions.sol\":67:2926  contract Funcions{... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cf8eaed76f3d254c266caa6181f65412766c39f16943d2e51f82c803370f5e2164736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b50603e80601a5f395ff3fe60806040525f80fdfea2646970667358221220cf8eaed76f3d254c266caa6181f65412766c39f16943d2e51f82c803370f5e2164736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1A PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF DUP15 0xAE 0xD7 PUSH16 0x3D254C266CAA6181F65412766C39F169 NUMBER 0xD2 0xE5 0x1F DUP3 0xC8 SUB CALLDATACOPY 0xF MCOPY 0x21 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "67:2859:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea2646970667358221220cf8eaed76f3d254c266caa6181f65412766c39f16943d2e51f82c803370f5e2164736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF DUP15 0xAE 0xD7 PUSH16 0x3D254C266CAA6181F65412766C39F169 NUMBER 0xD2 0xE5 0x1F DUP3 0xC8 SUB CALLDATACOPY 0xF MCOPY 0x21 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "67:2859:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "64",
								"totalCost": "12464"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 67,
									"end": 2926,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 67,
									"end": 2926,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cf8eaed76f3d254c266caa6181f65412766c39f16943d2e51f82c803370f5e2164736f6c634300081a0033",
									".code": [
										{
											"begin": 67,
											"end": 2926,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 67,
											"end": 2926,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 67,
											"end": 2926,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 67,
											"end": 2926,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 67,
											"end": 2926,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 67,
											"end": 2926,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"Functions.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Functions.sol\":\"Funcions\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Functions.sol\":{\"keccak256\":\"0x6b1cdf4d9bd25429124a36ab92b0028f9b7a845b073aa02ee732fe6749871124\",\"license\":\"Unlicensed\",\"urls\":[\"bzz-raw://66fc235b66e336949a91418acfe7eea7f4cdf5f7f977045d7394a0419b734215\",\"dweb:/ipfs/QmXWbQbkBP9yaMEuW28LzVXUNFYQBX3bTqJKP6fxwrwNLr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"Functions.sol": {
				"ast": {
					"absolutePath": "Functions.sol",
					"exportedSymbols": {
						"Funcions": [
							2
						]
					},
					"id": 3,
					"license": "Unlicensed",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "40:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Funcions",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2,
							"linearizedBaseContracts": [
								2
							],
							"name": "Funcions",
							"nameLocation": "76:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 3,
							"src": "67:2859:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "40:2886:0"
				},
				"id": 0
			}
		}
	}
}